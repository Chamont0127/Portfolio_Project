--Select the data we are using
SELECT location, date, total_cases, new_cases, total_deaths, population
 FROM `covid-data-analysis-project.covid_data.covid_deaths`
order by 1,2;

-- Looking at total cases by total deaths
-- Shows likelyhood of death by location (in the United States, or wherever you want to look)
SELECT location, date, total_cases, total_deaths, (total_deaths/total_cases) *100 as death_percentage
 FROM `covid-data-analysis-project.covid_data.covid_deaths`
 WHERE location = 'United States'
order by 1,2;

-- Looking at total cases by population
-- Shows what percentage of population got Covid by location
SELECT location, date, total_cases, population, (total_cases/population) *100 as case_percentage
 FROM `covid-data-analysis-project.covid_data.covid_deaths`
 WHERE location = 'United States'
order by 1,2;

-- Looking at which countries had the highest infection rates compared to population
SELECT location, MAX(total_cases) as highest_infection_count, population, MAX((total_cases/population)) *100 as highest_infection_percent
 FROM `covid-data-analysis-project.covid_data.covid_deaths`
 Group By population, location
order by highest_infection_percent desc;

-- Looking at which countries had the highest death rates compared to population
SELECT location, MAX(CAST(total_deaths as int)) as highest_death_count, population, MAX((total_deaths/population)) *100 as highest_death_percent
 FROM `covid-data-analysis-project.covid_data.covid_deaths`
 WHERE continent is not null
 Group By population, location
order by highest_death_count desc;

-- Lets look at it by continent too
SELECT location, MAX(cast(total_deaths as int)) as total_death_count
FROM `covid-data-analysis-project.covid_data.covid_deaths`
Where continent is null 
Group By location
Order By total_death_count desc;

-- Global Numbers
SELECT date, SUM(new_cases) as daily_new_cases, SUM(CAST(new_deaths as int)) as daily_new_deaths, (SUM(CAST(new_deaths as int))/SUM(new_cases))*100 as daily_global_death_percentage
FROM `covid-data-analysis-project.covid_data.covid_deaths`
WHERE continent is not null 
GROUP BY date
ORDER BY date;

-- Looking at Total Population and Vaccinations
Select dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, 
SUM(CAST(vac.new_vaccinations as int)) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) as rolling_vaccinations
FROM `covid-data-analysis-project.covid_data.covid_deaths` dea
JOIN `covid-data-analysis-project.covid_data.covid_vaccinations` vac
ON dea.location = vac.location
AND dea.date = vac.date
WHERE dea.continent is not null
ORDER BY 2,3;

-- USE CTE
WITH PopvsVac AS  
(
Select dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, 
SUM(CAST(vac.new_vaccinations as int)) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) as rolling_vaccinations
FROM `covid-data-analysis-project.covid_data.covid_deaths` dea
JOIN `covid-data-analysis-project.covid_data.covid_vaccinations` vac
ON dea.location = vac.location
AND dea.date = vac.date
WHERE dea.continent is not null
--ORDER BY 2,3
)
Select continent, location, date, population, new_vaccinations, rolling_vaccinations, (rolling_vaccinations/population)*100 as vaccination_percentage
FROM PopvsVac;

-- Temp Table
CREATE TEMP TABLE PercentPopulationVaccinated
(
    continent string,
    location string,
    date datetime,
    population numeric,
    new_vaccinations numeric,
    rolling_people_vaccinated numeric
);

INSERT INTO PercentPopulationVaccinated
Select dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, 
SUM(CAST(vac.new_vaccinations as int)) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) as rolling_vaccinations
FROM `covid-data-analysis-project.covid_data.covid_deaths` dea
JOIN `covid-data-analysis-project.covid_data.covid_vaccinations` vac
ON dea.location = vac.location
AND dea.date = vac.date
WHERE dea.continent is not null
--ORDER BY 2,3
;
SELECT (rolling_people_vaccinated/population)*100 as vaccination_percentage
FROM PercentPopulationVaccinated;

-- Create a View to store data for later visualizations

CREATE VIEW PercentPopulationVaccinated as 
Select dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, 
SUM(CAST(vac.new_vaccinations as int)) OVER (PARTITION BY dea.location ORDER BY dea.location, dea.date) as rolling_vaccinations
FROM `covid-data-analysis-project.covid_data.covid_deaths` dea
JOIN `covid-data-analysis-project.covid_data.covid_vaccinations` vac
ON dea.location = vac.location
AND dea.date = vac.date
WHERE dea.continent is not null
--ORDER BY 2,3;
